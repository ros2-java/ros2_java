@{
def upperfirst(s):
    return s[0].capitalize() + s[1:]
}@
@
// generated from rosidl_generator_java/resource/msg.java.template
// generated code does not contain a copyright notice

@##########################################################################
@# EmPy template for generating <msg> files Java
@# Context:
@#  - spec (rosidl_parser.MessageSpecification)
@#    Parsed specification of the .msg file
@#  - module_name (string)
@#  - jni_package_name (string)
@#  - subfolder (string)
@#    The subfolder / subnamespace of the message
@#    Either 'msg' or 'srv'
@##########################################################################
@
package @(package_name).@(subfolder);

// IMPORTS
import org.ros2.rcljava.common.RCLJavaProxy;
import org.ros2.rcljava.internal.message.Message;

@[for field in spec.fields]@
@[    if not field.type.is_primitive_type()]@
@
import @(field.type.pkg_name).msg.@(field.type.type);
@
@[    end if]@
@[end for]@

/**
 * Java Message for ROS2(idl) of @(type_name).
 */
public final class @(type_name) implements Message {

    /** AutoLoader JNI library. */
    static {
        RCLJavaProxy.loadLibrary("@(spec.base_type.pkg_name)_@(type_name)_s__" + RCLJavaProxy.getTypesupportIdentifier());
    }

    // NATIVES
    public static native long getFromJavaConverter();
    public static native long getToJavaConverter();
    public static native long getTypeSupport();

    // CONSTANTS
@[for constant in spec.constants]@
@
    public static final @(get_builtin_java_type(constant.type)) @(constant.name) = @(constant_value_to_java(constant.type, constant.value));
@
@[end for]@

    // FIELDS
@[for field in spec.fields]@
@
@[    if field.type.is_array]@
@
    /** List of @(field.name). */
    private java.util.List<@(get_java_type(field.type, use_primitives=False))> @(field.name) = new java.util.ArrayList<@(get_java_type(field.type, use_primitives=False))>();
@[        if field.default_value is not None]@
  //private java.util.List<@(get_java_type(field.type, use_primitives=False))> @(field.name) = java.util.Arrays.asList(new @(get_java_type(field.type, use_primitives=False))[] @(value_to_java(field.type, field.default_value)));
@[        else]@
  //private java.util.List<@(get_java_type(field.type, use_primitives=False))> @(field.name);
@[        end if]@

    /**
     * @(upperfirst(field.name)) setter.
     * @@param @(field.name)
     */
    public final void set@(upperfirst(convert_lower_case_underscore_to_camel_case(field.name)))(final java.util.Collection<@(get_java_type(field.type, use_primitives=False))> @(field.name)) {
@[        if field.type.array_size]@
@[            if field.type.is_upper_bound]@
        if(@(field.name).size() > @(field.type.array_size)) {
            throw new IllegalArgumentException("List too big, maximum size allowed: @(field.type.array_size)");
        }
@[            else]@
        if(@(field.name).size() != @(field.type.array_size)) {
            throw new IllegalArgumentException("Invalid size for fixed array, must be exactly: @(field.type.array_size)");
        }
@[            end if]@
@[        end if]@

        if (@(field.name) != null) {
            this.@(field.name) = new java.util.ArrayList<@(get_java_type(field.type, use_primitives=False))>(@(field.name));
        }
    }

    /**
     * @(upperfirst(field.name)) getter.
     * @@return @(get_java_type(field.type, use_primitives=False))
     */
    public final java.util.List<@(get_java_type(field.type, use_primitives=False))> get@(upperfirst(convert_lower_case_underscore_to_camel_case(field.name)))() {
        return this.@(field.name);
    }
@
@[    else]@
@
    /** @(field.name) field. */
@
@[        if (not field.type.is_primitive_type()) or (field.type.type == "string") ]@
@
    private @(get_java_type(field.type)) @(field.name) = new @(get_java_type(field.type))();
@[            if field.default_value is not None]@
    // private @(get_java_type(field.type)) @(field.name) = @(value_to_java(field.type, field.default_value));
@[            end if]@
@
@[        else]@
@
    private @(get_java_type(field.type)) @(field.name);
@
@[        end if]@
@

    /**
     * @(upperfirst(field.name)) setter.
     * @@param @(field.name)
     */
    public final void set@(upperfirst(convert_lower_case_underscore_to_camel_case(field.name)))(final @(get_java_type(field.type)) @(field.name)) {
@[        if field.type.string_upper_bound]@
        if(@(field.name).length() > @(field.type.string_upper_bound)) {
            throw new IllegalArgumentException("String too long, maximum size allowed: @(field.type.string_upper_bound)");
        }
@[        end if]@
        this.@(field.name) = @(field.name);
    }

    /**
     * @(upperfirst(field.name)) getter.
     * @@return @(get_java_type(field.type))
     */
    public final @(get_java_type(field.type)) get@(upperfirst(convert_lower_case_underscore_to_camel_case(field.name)))() {
        return this.@(field.name);
    }
@
@[    end if]@
@

@[end for]@
}
